Program = StatementList ;

StatementList = { Statement } ;

Statement = VariableDeclaration
          | FunctionDeclaration
          | StructDeclaration
          | ClassDeclaration
          | UnionDeclaration
          | EnumDeclaration
          | ExpressionStatement
          | IfStatement
          | ForStatement
          | WhileStatement
          | ReturnStatement
          | MatchStatement
          | ImportStatement
          | NamespaceDeclaration
          ;

VariableDeclaration = Type , Identifier , [ "=" , Expression ] , ";" ;

FunctionDeclaration = ("auto" | Type) , Identifier , "(" , [ ParameterList ] , ")" , Block | ("auto" | Type) , Identifier , "<" , TypeList , ">" , "(" , [ ParameterList ] , ")" , Block;

StructDeclaration = "struct" , Identifier , "{" , { StructMember } , "}" , ";" ;

ClassDeclaration = "class" , Identifier , "{" , { ClassMember } , "}" , ";" ;

UnionDeclaration = "union" , Identifier , "{" , { UnionMember } , "}" , ";" ;

EnumDeclaration = "enum" , Identifier , "{" , { EnumMember } , [ "," ] , "}" , ";" ;

MatchStatement = "match" , "(" , Expression , ")" , "{" , { MatchCase } , "}" ;

ExpressionStatement = Expression , ";" ;

IfStatement = "if" , "(" , [ VariableDeclaration | ExpressionStatement ] , Expression , ")" , Block , [ "else" , ( Block | IfStatement ) ] ;

ForStatement = "for" , "(" , [ VariableDeclaration | ExpressionStatement ] , ";" , [ Expression ] , ";" , [ Expression ] , ")" , Block ;

WhileStatement = "while" , "(" , Expression , ")" , Block ;

ReturnStatement = "return" , [ Expression ] , ";" ;

ImportStatement = "import" , StringLiteral , ";" ;

NamespaceDeclaration = "namespace" , Identifier , "{" , { Statement } , "}" ;

Type = QualifiedIdentifier | Identifier | PrimitiveType | CompositeType | PointerType | ReferenceType ;

QualifiedIdentifier = Identifier , { "::" , Identifier } ;

PrimitiveType = "int" | "float" | "double" | "char" | "bool" | "void" | "long" | "short" | "signed" | "unsigned" | "wchar\_t" ;

CompositeType = "[" , TypeList , "]" ;

PointerType = Type , "\*" ;

ReferenceType = Type , "&" ;

TypeList = Type , { "," , Type } ;

ParameterList = Parameter , { "," , Parameter } ;

Parameter = Type , Identifier ;

StructMember = VariableDeclaration
             | FunctionDeclaration
             | "public:"
             | "private:"
             | "protected:"
             ;

ClassMember = VariableDeclaration
             | FunctionDeclaration
             | "public:"
             | "private:"
             | "protected:"
             ;

UnionMember = VariableDeclaration;

EnumMember = Identifier , [ "{" , { VariableDeclaration } , "}" ] , [ "=" , IntegerLiteral ] , "," ;

Literal = IntegerLiteral | FloatingLiteral | StringLiteral | CharLiteral | BooleanLiteral;

IntegerLiteral = DecimalLiteral | OctalLiteral | HexLiteral | BinaryLiteral ;

DecimalLiteral = Digit , { Digit } ;

OctalLiteral = "0" , OctalDigit , { OctalDigit } ;

HexLiteral = ( "0x" | "0X" ) , HexDigit , { HexDigit } ;

BinaryLiteral = ( "0b" | "0B" ) , BinaryDigit , { BinaryDigit } ;

FloatingLiteral = Digit , { Digit } , "." , Digit , { Digit } , [ ExponentPart ] ;

ExponentPart = ( "e" | "E" ) , [ "+" | "-" ] , Digit , { Digit } ;

StringLiteral = """ , { StringCharacter } , """ ;

StringCharacter = AnyCharacterExceptDoubleQuote | EscapeSequence ;

AnyCharacterExceptDoubleQuote = AnyCharacterExceptDoubleQuoteChar ;

EscapeSequence = "\\" , ( "n" | "t" | "\\" | """ | "'" | "r" | "0" ) ;

CharLiteral = "'" , ( AnyCharacterExceptSingleQuote | EscapeSequence ) , "'" ;

AnyCharacterExceptSingleQuote = AnyCharacterExceptSingleQuoteChar ;

BooleanLiteral = "true" | "false" ;

Identifier = ( Letter | "_" ) , { Letter | Digit | "_" } ;

Letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" |
"N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" |
"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" |
"n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;

Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

OctalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;

HexDigit = Digit | "A" | "B" | "C" | "D" | "E" | "F" |
"a" | "b" | "c" | "d" | "e" | "f" ;

BinaryDigit = "0" | "1" ;

Expression = AssignmentExpression ;

AssignmentExpression = ConditionalExpression , [ "=" , AssignmentExpression ] ;

ConditionalExpression = LogicalOrExpression , [ "?" , Expression , ":" , ConditionalExpression ] ;

LogicalOrExpression = LogicalAndExpression , { "||" , LogicalAndExpression } ;

LogicalAndExpression = EqualityExpression , { "&&" , EqualityExpression } ;

EqualityExpression = RelationalExpression , { ( "==" | "!=" ) , RelationalExpression } ;

RelationalExpression = AdditiveExpression , { ( "<" | ">" | "<=" | ">=" ) , AdditiveExpression } ;

AdditiveExpression = MultiplicativeExpression , { ( "+" | "-" ) , MultiplicativeExpression } ;

MultiplicativeExpression = UnaryExpression , { ( "\*" | "/" ) , UnaryExpression } ;

UnaryExpression = [ ( "+" | "-" | "!" | "\*" | "&" ) ] , PrimaryExpression ;

PrimaryExpression = Identifier | QualifiedIdentifier | Literal | "(" , Expression , ")" | CompositeLiteral | FunctionCall | MemberAccess;

CompositeLiteral = "{" , [ ExpressionList ] , "}" ;

ExpressionList = Expression , { "," , Expression } ;

FunctionCall = ( Identifier | QualifiedIdentifier ) , "(" , [ ArgumentList ] , ")" ;

ArgumentList = Expression , { "," , Expression } ;

MemberAccess = ( Identifier | QualifiedIdentifier ) , ( "." | "->" ) , Identifier ;

MatchCase = ( IntegerLiteral | Label ) , ":" , Block ;

Label = ( Identifier | QualifiedIdentifier ) ;

Block = "{" , { Statement } , "}" ;

